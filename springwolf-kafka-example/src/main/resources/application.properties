import unittest
import pandas as pd
from calculation_methods import apply_post_inference_calculation, _gh_calculation

class TestCalculationMethods(unittest.TestCase):

    def setUp(self):
        # Setup inicial para os testes, criando um DataFrame de exemplo
        self.df = pd.DataFrame({'score': [10, 20, 30, 40, 50]})

    def test_apply_post_inference_calculation_gh(self):
        # Teste para verificar se o cálculo do tipo "GH" funciona corretamente
        result = apply_post_inference_calculation(self.df.copy(), 'score', 'GH')
        expected_bins = pd.cut(self.df['score'], bins=[0, 10, 20, 30, 40], labels=[1, 2, 3, 4])
        pd.testing.assert_series_equal(result['score'], expected_bins, check_names=False)

    def test_apply_post_inference_calculation_invalid_type(self):
        # Teste para verificar se o erro é lançado para um tipo de cálculo inválido
        with self.assertRaises(ValueError) as context:
            apply_post_inference_calculation(self.df.copy(), 'score', 'invalid_type')
        self.assertEqual(str(context.exception), "Cálculo 'invalid_type' não é suportado.")

    def test_gh_calculation(self):
        # Teste direto da função _gh_calculation
        result = _gh_calculation(self.df.copy(), 'score')
        expected_bins = pd.cut(self.df['score'], bins=[0, 10, 20, 30, 40], labels=[1, 2, 3, 4])
        pd.testing.assert_series_equal(result['score'], expected_bins, check_names=False)

if __name__ == '__main__':
    unittest.main()
