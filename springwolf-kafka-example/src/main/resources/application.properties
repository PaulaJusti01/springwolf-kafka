import unittest
import pandas as pd
from itau_mr7_drp_lotus_internals import apply_transformation

class TestApplyTransformation(unittest.TestCase):
    
    def setUp(self):
        # Configuração de um DataFrame de teste
        self.df = pd.DataFrame({
            'score': [1, 2, 3, 4, 5]
        })

    def test_apply_transformation_valid(self):
        # Função de transformação simples para teste
        def increment(x):
            return x + 1
        
        # Aplica a transformação e verifica o resultado
        transformed_df = apply_transformation(self.df.copy(), 'score', increment)
        expected_df = self.df.copy()
        expected_df['score'] = expected_df['score'] + 1
        
        pd.testing.assert_frame_equal(transformed_df, expected_df)

    def test_apply_transformation_no_function(self):
        # Testa se um ValueError é lançado quando nenhuma função é fornecida
        with self.assertRaises(ValueError):
            apply_transformation(self.df.copy(), 'score', None)

    def test_apply_transformation_with_params(self):
        # Função de transformação que utiliza parâmetros
        def scale(x, factor):
            return x * factor
        
        # Aplica a transformação com um parâmetro
        transformed_df = apply_transformation(self.df.copy(), 'score', scale, factor=10)
        expected_df = self.df.copy()
        expected_df['score'] = expected_df['score'] * 10
        
        pd.testing.assert_frame_equal(transformed_df, expected_df)

if __name__ == '__main__':
    unittest.main()
